Flask框架知识
1. 整型、浮点型、路径型、字符串型正则表达式路由转化器
2. post与get请求、上传文件、cookie获取与响应、404处理
3. 模板自动转义、定义过滤器、定义全局上下文处理器、Jinja2语法、包含、继承、定义宏
4. flask-wtf定义表单模型、字段类型、字段验证、视图处理表单、模板使用表单
5. flask-sqlachemy定义数据库模型、添加数据、修改数据、查询数据、删除数据、数据库事件、数据迁移
6. 蓝图优化项目结构，实现前台与后台业务逻辑
7. flask的部署方法、nginx服务、mysql服务、nginx反向代理对视频流媒体限制下载速率、限制单个ip能发起的播放连接数

插件：
werkzug工具箱
pymysql数据库驱动
sqlalchemy数据库orm

wtforms表单验证工具
jinjia2模板引擎
flask-script命令行脚本
functools定义高阶函数

视频技术：
jwplayer播放器插件
视频限速限IP访问
flv、mp4视频格式支持
nginx点播实现

搭建Flask
在项目文件夹
virtualenv venv
ls venv/bin/	查看虚拟环境里的可用命令
source venv/bin/activate	激活虚拟环境
pip3 freeze		检测依赖关系
pip3 install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com flask 
deactivate		退出虚拟环境

flask 蓝图构建项目
1. 定义蓝图
(app/admin/__init__.py)
from flask import Blueprint
admin = Blueprint('admin',__name__)
import views
2. 注册蓝图(app/__init__.py)
from admin import admin as admin_blueprint
app.register_blueprint(admin_blueprint, url_prefix='/admin')
3. 调用蓝图(app/admin/views.py)
from . import admin
@admin.route('/')

project
	app
		admin
			__init__.py
			forms.py
			views.py
		home
			__init__.py
			forms.py
			views.py
		templates
			admin
			home
		__init__.py
		models.py
	manage.py
	

4. 实例Flask绑定到app
app/__init__.py
from flask import Flask
app = Flask(__name__)
app.debug = True
5. 程序入口(project/manage.py)
from app import app 
if __name__ == '__main__':
	app.run()
5. 运行manage.py



jinja2
	基本语法
	 　　在jinja2中，存在三种语法：

	控制结构 {% %}
	变量取值 {{ }}
	注释 {# #}
	　　下面是一个简单的jinja2例子

	{# This is jinja code
	 
		{% for file in filenames %}
		...
		{% endfor %}
	 
	#}
　　可以看到，for循环的使用方式和Python比较类似，但是没有了句尾的冒号，另外需要使用endfor最为结尾，其实在jinja2中，if也是一样的，结尾需要使用endif。
	
	jinja2的继承和Super函数
	　　jinja2中最强大的部分就是模板继承。模板继承允许我们创建一个基本(骨架)文件，其他文件从该骨架文件继承，然后针对自己需要的地方进行修改。

	　　jinja2的骨架文件中，利用block关键字表示其包涵的内容可以进行修改。

	　　以下面的骨架文件base.html为例：


	<!DOCTYPE html>
	<html lang="en">
	<head>
		{% block head %}
		<link rel="stylesheet" href="style.css"/>
		<title>{% block title %}{% endblock %} - My Webpage</title>
		{% endblock %}
	</head>
	<body>
	<div id="content">{% block content %}{% endblock %}</div>
	<div id="footer">
		{% block  footer %}
		<script>This is javascript code </script>
		{% endblock %}
	</div>
	</body>
	</html>
	　　这里定义了四处 block，即：head，title，content，footer。那怎么进行继承和变量替换呢？注意看下面的文件

	{% extend "base.html" %}       # 继承base.html文件
	 
	{% block title %} Dachenzi {% endblock %}   # 定制title部分的内容
	 
	{% block head %}
		{{  super()  }}        # 用于获取原有的信息
		<style type='text/css'>
		.important { color: #FFFFFF }
		</style>
	{% endblock %}   
	 
	# 其他不修改的原封不同的继承
	　　PS: super()函数 表示获取block块中定义的原来的内容。

	利用jinja2进行渲染
	　　jinja2模块中有一个名为Enviroment的类，这个类的实例用于存储配置和全局对象，然后从文件系统或其他位置中加载模板。

	基本使用方法
	　　大多数应用都在初始化的时候撞见一个Environment对象，并用它加载模板。Environment支持两种加载方式：

	PackageLoader：包加载器
	FileSystemLoader：文件系统加载器
	PackageLoader
	　　使用包加载器来加载文档的最简单的方式如下：

	from jinja2 import PackageLoader,Environment
	env = Environment(loader=PackageLoader('python_project','templates'))    # 创建一个包加载器对象
	 
	template = env.get_template('bast.html')    # 获取一个模板文件
	template.render(name='daxin',age=18)   # 渲染
	　　其中：

	PackageLoader()的两个参数为：python包的名称，以及模板目录名称。
	get_template()：获取模板目录下的某个具体文件。
	render()：接受变量，对模板进行渲染
	FileSystemLoader
	　　文件系统加载器，不需要模板文件存在某个Python包下，可以直接访问系统中的文件。
	
	
6. 在views.py中
from . import home
from flask import render_template

@home.route('/')#home是在home包初始文件中实例化的蓝图对象
def index():
	return render_template('home/index.html')#实际传入的是jinja2模板template/home/index.html
 	#jinja2模板示例
	{% extend "home/home.html" %}       # 继承home.html文件
	 
	{% block title %} Dachenzi {% endblock %}   # 定制title部分的内容
	 
	{% block head %}
		{{  super()  }}        # 用于获取原有的信息
		<style type='text/css'>
		.important { color: #FFFFFF }
		</style>
	{% endblock %} 
	

表单验证
	安装flask_wtf

app/admin/forms.py
from flask_wtf import FlaskForm 
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, ValidationError

class LoginForm(FlaskForm):
	#管理员登录表单
	account = StringField(
		label='账号'
		validators=[			#验证器
			DataRequired('请输入账号')
		],
		description='账号',
		render_kw={
			'class':'form-control',
			'placeholder':'请输入账号！',
			'required':'required'
		}
	)
	pwd = PasswordField(
		...
		)
		
	#定义表单验证器
	def validate_account(self, field):
		account = field.data
		admin = Admin.query.filter_by(name = account).count()
		if admin == 0 :
			raise ValidationError('账号不存在')
		
将定义的表单验证类添加到视图函数
app/admin/views.py
from . import admin 
	#redirect 是重定向函数，输入一个URL后，自动跳转到另一个URL所在的地址redirect(url_for('login'))
	#url_for() 函数最简单的用法是以视图函数名作为参数，返回对应的url，还可以用作加载静态文件，如
	#<link rel="stylesheet" href="{{url_for('static',filename='css/index.css')}}">
	#flash消息闪现
from flask inport render_template, redirect, url_for, flash, session, required
from app.admin.forms import LoginForm
from app.models import Admin#导入Admin表

@admin.route('/login/', methods=['GET', 'POST'])#methods设置可接收的请求
def login():
	form = LoginForm()
	#对提交的表单判断
	if form.Validate_on_submit():
		data = form.data 
		admin = Admin.query.filter_by(name=data['account']).first()#sql查询
		if not admin.check_pwd(data['pwd']):#check_pwd是在modles中定义的函数
			flash('密码错误')
			return redirect(url_for('admin.login'))
		session['admin'] = data['account']	#记录刚才输入的账号
		return redirect(required.args.get('next') or url_for('admin.index'))
	return render_template('admin/login.html', form=from)
	return render_template('admin/login.html', form = form)
	
修改login.html
替换<input name='user' type='text' class='form-control' placeholder='请输入账号！'>
为{{ form.account }}	#jinja2会根据account绑定的内容生成input标签
password替换同理

输入密码错误时，消息闪现
<div class='login-box-body'>
	{% for msg in get_flashed_message() %}
	<p class='login-box-msg'>{{ msg }}</p>
	{% endfor %}
	...
<div>

退出登录
app/admin/views.py
@admin.route('/logout/')
def logout():
	session.pop('account', None)
	return redirect(url_for('admin.login'))

访问控制
app/admin/views.py
from functools import wraps

def admin_login_req(f):
	@wraps(f)
	def decorated_function(*args, **kwargs):
		if 'admin' not in session:
			return redirect(url_for('admin.login', next=request.url))
		return f(*args, **kwargs)
	
	return decorated_function
在需要验证登录状态的路由添加该装饰器，如：
@admin.route('/logout/')
@admin_login_req
def logout():
	session.pop('admin', None)
	return redirect(url_for('admin.login'))

	
	
	
	
	
	
	
	
	